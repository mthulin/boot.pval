[{"path":"https://mthulin.github.io/boot.pval/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 boot.pval authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mthulin.github.io/boot.pval/articles/boot_summary.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"An introduction to bootstrap p-values for regression models using the boot.pval package","text":"p-values can computed inverting corresponding confidence intervals, described Section 14.2 Thulin (2024) Section 3.12 Hall (1992). package contains functions computing bootstrap p-values way. approach relies fact : p-value two-sided test parameter theta smallest alpha theta contained corresponding 1-alpha confidence interval, test parameter theta significance level alpha, set values theta aren’t rejected two-sided test (used null hypothesis) 1-alpha confidence interval theta.","code":""},{"path":"https://mthulin.github.io/boot.pval/articles/boot_summary.html","id":"summaries-for-regression-models","dir":"Articles","previous_headings":"","what":"Summaries for regression models","title":"An introduction to bootstrap p-values for regression models using the boot.pval package","text":"Summary tables confidence intervals p-values coefficients regression models can obtained using boot_summary (models) censboot_summary (models censored response variables) functions. Currently, following models supported: Linear models fitted using lm, Generalised linear models fitted using glm glm.nb, Nonlinear models fitted using nls, Robust linear models fitted using MASS::rlm, Ordered logistic probit regression models fitted (without weights) using MASS:polr, Linear mixed models fitted using lme4::lmer lmerTest::lmer, Generalised linear mixed models fitted using lme4::glmer. Cox PH regression models fitted using survival::coxph (using censboot_summary). Accelerated failure time models fitted using survival::survreg rms::psm (using censboot_summary). regression model : residuals(object, type=\"pearson\") returns Pearson residuals; fitted(object) returns fitted values; hatvalues(object) returns leverages, perhaps value 1 effectively ignore setting hatvalues. addition, data argument contain missing values among columns actually used fitting model. number examples available Chapters 8 9 Modern Statistics R. simple examples linear regression model mtcars data: See Davison Hinkley (1997) details residual resampling (default) case resampling. toy example generalised linear mixed model (using small number bootstrap repetitions):","code":"library(boot.pval) # Bootstrap summary of a linear model for mtcars: model <- lm(mpg ~ hp + vs, data = mtcars) boot_summary(model) #>                Estimate Lower.bound Upper.bound p.value #> (Intercept) 26.96300111  21.4837009 33.13272436  <0.001 #> hp          -0.05453412  -0.0847155 -0.02624529  <0.001 #> vs           2.57622314  -1.3354573  6.23773863   0.225  # Use 9999 bootstrap replicates and adjust p-values for # multiplicity using Holm's method: boot_summary(model, R = 9999, adjust.method = \"holm\") #>                Estimate Lower.bound Upper.bound p.value Adjusted p-value #> (Intercept) 26.96300111 21.29253243  32.6863499  <1e-04           0.0003 #> hp          -0.05453412 -0.08217782  -0.0256178   4e-04           0.0008 #> vs           2.57622314 -1.42802199   6.4742569  0.2012           0.2012  # Use case resampling instead of residual resampling: boot_summary(model, method = \"case\") #>                Estimate Lower.bound Upper.bound p.value #> (Intercept) 26.96300111  21.5588473 35.07007975  <0.001 #> hp          -0.05453412  -0.1024433 -0.02828226  <0.001 #> vs           2.57622314  -1.4885872  6.50911625   0.256  # Export results to a gt table: boot_summary(model, R = 9999) |>   summary_to_gt() # Export results to a Word document: library(flextable) boot_summary(model, R = 9999) |>   summary_to_flextable() |>    save_as_docx(path = \"my_table.docx\") library(lme4) model <- glmer(TICKS ~ YEAR + (1|LOCATION),            data = grouseticks, family = poisson) boot_summary(model, R = 99)"},{"path":"https://mthulin.github.io/boot.pval/articles/boot_summary.html","id":"speeding-up-computations","dir":"Articles","previous_headings":"","what":"Speeding up computations","title":"An introduction to bootstrap p-values for regression models using the boot.pval package","text":"complex models, speed can greatly improved using parallelisation. lmer glmer models, set using parallel (available options \"multicore\" \"snow\"). number CPUs use set using ncpus. models, use ncores:","code":"model <- glmer(TICKS ~ YEAR + (1|LOCATION),            data = grouseticks, family = poisson) boot_summary(model, R = 999, parallel = \"multicore\", ncpus = 10) model <- lm(mpg ~ hp + vs, data = mtcars) boot_summary(model, R = 9999, ncores = 10)"},{"path":"https://mthulin.github.io/boot.pval/articles/boot_summary.html","id":"survival-models","dir":"Articles","previous_headings":"","what":"Survival models","title":"An introduction to bootstrap p-values for regression models using the boot.pval package","text":"Survival regression models fitted using argument model = TRUE. summary table can obtained using censboot_summary. default, table contains exponentiated coefficients (.e. hazard ratios, case Cox PH model). speed computations using parallelisation, use parallel ncpus arguments:","code":"library(survival) # Weibull AFT model: model <- survreg(formula = Surv(time, status) ~ age + sex, data = lung,                 dist = \"weibull\", model = TRUE) # Table with exponentiated coefficients: censboot_summary(model) #> Using exponentiated coefficients. #>                Estimate Lower.bound Upper.bound p.value #> (Intercept) 531.0483429  214.499098 1343.961015  <0.001 #> age           0.9878178    0.973827    1.001999   0.089 #> sex           1.4653368    1.168961    1.875647   0.003  # Cox PH model: model <- coxph(formula = Surv(time, status) ~ age + sex, data = lung,                model = TRUE) # Table with hazard ratios: censboot_summary(model) #> Using exponentiated coefficients. #>     Estimate Lower.bound Upper.bound p.value #> age 1.017191   0.9996458    1.035802   0.054 #> sex 0.598566   0.4303380    0.815483  <0.001 # Table with original coefficients: censboot_summary(model, coef = \"raw\") #> Using raw coefficients. #>        Estimate  Lower.bound Upper.bound p.value #> age  0.01704533 -0.002462382  0.03643551   0.086 #> sex -0.51321852 -0.850467317 -0.20129079   0.005 censboot_summary(model, parallel = \"multicore\", ncpus = 10)"},{"path":"https://mthulin.github.io/boot.pval/articles/boot_summary.html","id":"other-hypothesis-tests","dir":"Articles","previous_headings":"","what":"Other hypothesis tests","title":"An introduction to bootstrap p-values for regression models using the boot.pval package","text":"Bootstrap p-values hypothesis tests based boot objects can obtained using boot.pval function. following examples extensions given documentation boot::boot:","code":"# Hypothesis test for the city data # H0: ratio = 1.4 library(boot) ratio <- function(d, w) sum(d$x * w)/sum(d$u * w) city.boot <- boot(city, ratio, R = 999, stype = \"w\", sim = \"ordinary\") boot.pval(city.boot, theta_null = 1.4) #> [1] 0.4594595  # Studentized test for the two sample difference of means problem # using the final two series of the gravity data. diff.means <- function(d, f) {   n <- nrow(d)   gp1 <- 1:table(as.numeric(d$series))[1]   m1 <- sum(d[gp1,1] * f[gp1])/sum(f[gp1])   m2 <- sum(d[-gp1,1] * f[-gp1])/sum(f[-gp1])   ss1 <- sum(d[gp1,1]^2 * f[gp1]) - (m1 *  m1 * sum(f[gp1]))   ss2 <- sum(d[-gp1,1]^2 * f[-gp1]) - (m2 *  m2 * sum(f[-gp1]))   c(m1 - m2, (ss1 + ss2)/(sum(f) - 2)) } grav1 <- gravity[as.numeric(gravity[,2]) >= 7, ] grav1.boot <- boot(grav1, diff.means, R = 999, stype = \"f\",                    strata = grav1[ ,2]) boot.pval(grav1.boot, type = \"stud\", theta_null = 0) #> [1] 0.04704705"},{"path":"https://mthulin.github.io/boot.pval/articles/boot_summary.html","id":"reference","dir":"Articles","previous_headings":"","what":"Reference","title":"An introduction to bootstrap p-values for regression models using the boot.pval package","text":"Davison, .C. Hinkley, D.V. (1997) Bootstrap Methods Application. Cambridge University Press.","code":""},{"path":"https://mthulin.github.io/boot.pval/articles/boot_t_test.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Bootstrap tests for location","text":"Traditional versions Student’s t-test (t.test R) rely assumption normality. non-normal data, can lead misleading p-values confidence intervals. cases, often recommended use Wilcoxon-Mann-Whitney test (wilcox.test R) instead. Despite described test location, test differences medians, Wilcoxon-Mann-Whitney test actually test equivalence distributions, unless strict assumptions met. addition, wilcox.test provide confidence interval difference medians. many cases, better option use bootstrap t-test (inference means) bootstrap median test (inference medians). can used without normality assumption, provide confidence intervals parameters interest. vignette describes perform bootstrap t-tests bootstrap median tests.","code":"library(boot.pval)"},{"path":"https://mthulin.github.io/boot.pval/articles/boot_t_test.html","id":"two-sample-bootstrap-t-tests","dir":"Articles","previous_headings":"","what":"Two-sample bootstrap t-tests","title":"Bootstrap tests for location","text":"illustrate use bootstrap t-tests, ’ll use classic sleep data, “show effect two soporific drugs (increase hours sleep compared control) 10 patients” (see ?sleep details). wish test whether mean value extra (increase hours sleep) variable differs two groups described group variable. syntax identical t.test: prefer, can also use |> pipe follows: default, confidence interval p-value based studentized bootstrap confidence interval. options available normal, basic, percentile BCa intervals; see Chapter 5 Davison Hinkley (1997) details. can choose method used using type argument. can control number bootstrap replicates used (argument R; default 9999) direction alternative hypothesis (argument alternative): case, data actually paired, make sense perform paired bootstrap t-test instead. reshape data wide format, first measurements ends variable extra.1, second measurement ends variable extra.2. can run test follows:","code":"boot_t_test(extra ~ group, data = sleep) #>  #>  Welch Two Sample Bootstrap t-test (studentized) #>  #> data:  extra by group #> t = -1.8608, R = 9999, p-value = 0.08281 #> alternative hypothesis: true difference in means between group 1 and group 2 is not equal to 0 #> 95 percent confidence interval: #>  -3.3910742  0.2349124 #> sample estimates: #> mean in group 1 mean in group 2  #>            0.75            2.33 sleep |> boot_t_test(extra ~ group) sleep |> boot_t_test(extra ~ group, type = \"perc\") # Percentile interval sleep |> boot_t_test(extra ~ group, type = \"bca\") # BCa interval sleep |> boot_t_test(extra ~ group, R = 999, alternative = \"less\") # Reshape to wide format: sleep2 <- reshape(sleep, direction = \"wide\",                   idvar = \"ID\", timevar = \"group\")  # Traditional interface: boot_t_test(sleep2$extra.1, sleep2$extra.2, paired = TRUE)  # Using pipes: sleep2 |> boot_t_test(Pair(extra.1, extra.2) ~ 1)"},{"path":"https://mthulin.github.io/boot.pval/articles/boot_t_test.html","id":"one-sample-bootstrap-t-tests","dir":"Articles","previous_headings":"","what":"One-sample bootstrap t-tests","title":"Bootstrap tests for location","text":"one sample bootstrap t-tests, need provide single vector containing measurements. can also specify null value mean (argument mu):","code":"# Traditional interface: boot_t_test(sleep$extra, mu = 1)  # Using pipes: sleep |> boot_t_test(extra ~ 1, mu = 1)"},{"path":"https://mthulin.github.io/boot.pval/articles/boot_t_test.html","id":"bootstrap-median-tests","dir":"Articles","previous_headings":"","what":"Bootstrap median tests","title":"Bootstrap tests for location","text":"Running bootstrap median test boot_median_test function completely analogously running bootstrap t-test. difference hood - medians used instead means. studentized BCa versions test use inner bootstrap estimate variance statistic, takes longer run tests presented .","code":"boot_median_test(extra ~ group, data = sleep, type = \"perc\")  sleep |> boot_median_test(extra ~ group, R = 999, alternative = \"less\")  boot_median_test(sleep$extra, mu = 1)"},{"path":"https://mthulin.github.io/boot.pval/articles/boot_t_test.html","id":"reference","dir":"Articles","previous_headings":"","what":"Reference","title":"Bootstrap tests for location","text":"Davison, .C. Hinkley, D.V. (1997) Bootstrap Methods Application. Cambridge University Press.","code":""},{"path":"https://mthulin.github.io/boot.pval/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Måns Thulin. Author, maintainer.","code":""},{"path":"https://mthulin.github.io/boot.pval/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Thulin M (2025). boot.pval: Bootstrap p-Values. R package version 0.7.0, https://mthulin.github.io/boot.pval/, https://github.com/mthulin/boot.pval.","code":"@Manual{,   title = {boot.pval: Bootstrap p-Values},   author = {Måns Thulin},   year = {2025},   note = {R package version 0.7.0, https://mthulin.github.io/boot.pval/},   url = {https://github.com/mthulin/boot.pval}, }"},{"path":"https://mthulin.github.io/boot.pval/index.html","id":"bootpval-","dir":"","previous_headings":"","what":"Bootstrap p-Values","title":"Bootstrap p-Values","text":"R package provides functions computing bootstrap p-values based boot objects, convenience functions bootstrap confidence intervals p-values various regression models.","code":""},{"path":"https://mthulin.github.io/boot.pval/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bootstrap p-Values","text":"install package CRAN: install development version Github:","code":"install.packages(\"boot.pval\") library(devtools) install_github(\"mthulin/boot.pval\")"},{"path":"https://mthulin.github.io/boot.pval/index.html","id":"background","dir":"","previous_headings":"","what":"Background","title":"Bootstrap p-Values","text":"p-values can computed inverting corresponding confidence intervals, described Section 14.2 Thulin (2024) Section 3.12 Hall (1992). package contains functions computing bootstrap p-values way. approach relies fact : p-value two-sided test parameter theta smallest alpha theta contained corresponding 1-alpha confidence interval, test parameter theta significance level alpha, set values theta aren’t rejected two-sided test (used null hypothesis) 1-alpha confidence interval theta.","code":""},{"path":"https://mthulin.github.io/boot.pval/index.html","id":"summaries-for-regression-models","dir":"","previous_headings":"","what":"Summaries for regression models","title":"Bootstrap p-Values","text":"Summary tables confidence intervals p-values coefficients regression models can obtained using boot_summary (models) censboot_summary (models censored response variables) functions. Currently, following models supported: Linear models fitted using lm, Generalised linear models fitted using glm glm.nb, Nonlinear models fitted using nls, Robust linear models fitted using MASS::rlm, Ordered logistic probit regression models fitted (without weights) using MASS:polr, Linear mixed models fitted using lme4::lmer lmerTest::lmer, Generalised linear mixed models fitted using lme4::glmer. Cox PH regression models fitted using survival::coxph (using censboot_summary). Accelerated failure time models fitted using survival::survreg rms::psm (using censboot_summary). regression model : residuals(object, type=\"pearson\") returns Pearson residuals; fitted(object) returns fitted values; hatvalues(object) returns leverages, perhaps value 1 effectively ignore setting hatvalues. addition, data argument contain missing values among columns actually used fitting model. number examples available Chapters 8 9 Modern Statistics R. simple examples linear regression model mtcars data: See Davison Hinkley (1997) details residual resampling (default) case resampling. toy example generalised linear mixed model (using small number bootstrap repetitions):","code":"# Bootstrap summary of a linear model for mtcars: model <- lm(mpg ~ hp + vs, data = mtcars) boot_summary(model)  # Use 9999 bootstrap replicates and adjust p-values for # multiplicity using Holm's method: boot_summary(model, R = 9999, adjust.method = \"holm\")  # Use case resampling instead of residual resampling: boot_summary(model, method = \"case\")  # Export results to a gt table: boot_summary(model, R = 9999) |>   summary_to_gt() # Export results to a Word document: library(flextable) boot_summary(model, R = 9999) |>   summary_to_flextable() |>    save_as_docx(path = \"my_table.docx\") library(lme4) model <- glmer(TICKS ~ YEAR + (1|LOCATION),            data = grouseticks, family = poisson) boot_summary(model, R = 99)"},{"path":"https://mthulin.github.io/boot.pval/index.html","id":"speeding-up-computations","dir":"","previous_headings":"Summaries for regression models","what":"Speeding up computations","title":"Bootstrap p-Values","text":"complex models, speed can greatly improved using parallelisation. lmer glmer models, set using parallel (available options \"multicore\" \"snow\"). number CPUs use set using ncpus. models, use ncores:","code":"model <- glmer(TICKS ~ YEAR + (1|LOCATION),            data = grouseticks, family = poisson) boot_summary(model, R = 999, parallel = \"multicore\", ncpus = 10) model <- lm(mpg ~ hp + vs, data = mtcars) boot_summary(model, R = 9999, ncores = 10)"},{"path":"https://mthulin.github.io/boot.pval/index.html","id":"survival-models","dir":"","previous_headings":"Summaries for regression models","what":"Survival models","title":"Bootstrap p-Values","text":"Survival regression models fitted using argument model = TRUE. summary table can obtained using censboot_summary. default, table contains exponentiated coefficients (.e. hazard ratios, case Cox PH model). speed computations using parallelisation, use parallel ncpus arguments:","code":"library(survival) # Weibull AFT model: model <- survreg(formula = Surv(time, status) ~ age + sex, data = lung,                 dist = \"weibull\", model = TRUE) # Table with exponentiated coefficients: censboot_summary(model)  # Cox PH model: model <- coxph(formula = Surv(time, status) ~ age + sex, data = lung,                model = TRUE) # Table with hazard ratios: censboot_summary(model) # Table with original coefficients: censboot_summary(model, coef = \"raw\") censboot_summary(model, parallel = \"multicore\", ncpus = 10)"},{"path":"https://mthulin.github.io/boot.pval/index.html","id":"tests-of-location","dir":"","previous_headings":"","what":"Tests of location","title":"Bootstrap p-Values","text":"Traditional versions Student’s t-test (t.test R) rely assumption normality. non-normal data, can lead misleading p-values confidence intervals. cases, often recommended use Wilcoxon-Mann-Whitney test (wilcox.test R) instead. Despite described test location, test differences medians, Wilcoxon-Mann-Whitney test actually test equivalence distributions, unless strict assumptions met. addition, wilcox.test provide confidence interval difference medians. many cases, better option use bootstrap t-test (inference means) bootstrap median test (inference medians). can used without normality assumption, provide confidence intervals parameters interest.","code":""},{"path":"https://mthulin.github.io/boot.pval/index.html","id":"two-sample-bootstrap-t-tests","dir":"","previous_headings":"Tests of location","what":"Two-sample bootstrap t-tests","title":"Bootstrap p-Values","text":"illustrate use bootstrap t-tests, ’ll use classic sleep data, “show effect two soporific drugs (increase hours sleep compared control) 10 patients” (see ?sleep details). wish test whether mean value extra (increase hours sleep) variable differs two groups described group variable. syntax identical t.test: prefer, can also use |> pipe follows: default, confidence interval p-value based studentized bootstrap confidence interval. options available normal, basic, percentile BCa intervals; see Chapter 5 Davison Hinkley (1997) details. can choose method used using type argument. can control number bootstrap replicates used (argument R; default 9999) direction alternative hypothesis (argument alternative): case, data actually paired, make sense perform paired bootstrap t-test instead. reshape data wide format, first measurements ends variable extra.1, second measurement ends variable extra.2. can run test follows:","code":"boot_t_test(extra ~ group, data = sleep) sleep |> boot_t_test(extra ~ group) sleep |> boot_t_test(extra ~ group, type = \"perc\") # Percentile interval sleep |> boot_t_test(extra ~ group, type = \"bca\") # BCa interval sleep |> boot_t_test(extra ~ group, R = 999, alternative = \"less\") # Reshape to wide format: sleep2 <- reshape(sleep, direction = \"wide\",                   idvar = \"ID\", timevar = \"group\")  # Traditional interface: boot_t_test(sleep2$extra.1, sleep2$extra.2, paired = TRUE)  # Using pipes: sleep2 |> boot_t_test(Pair(extra.1, extra.2) ~ 1)"},{"path":"https://mthulin.github.io/boot.pval/index.html","id":"one-sample-bootstrap-t-tests","dir":"","previous_headings":"Tests of location","what":"One-sample bootstrap t-tests","title":"Bootstrap p-Values","text":"one sample bootstrap t-tests, need provide single vector containing measurements. can also specify null value mean (argument mu):","code":"# Traditional interface: boot_t_test(sleep$extra, mu = 1)  # Using pipes: sleep |> boot_t_test(extra ~ 1, mu = 1)"},{"path":"https://mthulin.github.io/boot.pval/index.html","id":"bootstrap-median-tests","dir":"","previous_headings":"Tests of location","what":"Bootstrap median tests","title":"Bootstrap p-Values","text":"Running bootstrap median test boot_median_test function completely analogously running bootstrap t-test. difference hood - medians used instead means. studentized BCa versions test use inner bootstrap estimate variance statistic, takes longer run tests presented .","code":"boot_median_test(extra ~ group, data = sleep, type = \"perc\")  sleep |> boot_median_test(extra ~ group, R = 999, alternative = \"less\")  boot_median_test(sleep$extra, mu = 1)"},{"path":"https://mthulin.github.io/boot.pval/index.html","id":"other-hypothesis-tests","dir":"","previous_headings":"","what":"Other hypothesis tests","title":"Bootstrap p-Values","text":"Bootstrap p-values hypothesis tests based boot objects can obtained using boot.pval function. following examples extensions given documentation boot::boot:","code":"# Hypothesis test for the city data # H0: ratio = 1.4 library(boot) ratio <- function(d, w) sum(d$x * w)/sum(d$u * w) city.boot <- boot(city, ratio, R = 999, stype = \"w\", sim = \"ordinary\") boot.pval(city.boot, theta_null = 1.4)  # Studentized test for the two sample difference of means problem # using the final two series of the gravity data. diff.means <- function(d, f) {   n <- nrow(d)   gp1 <- 1:table(as.numeric(d$series))[1]   m1 <- sum(d[gp1,1] * f[gp1])/sum(f[gp1])   m2 <- sum(d[-gp1,1] * f[-gp1])/sum(f[-gp1])   ss1 <- sum(d[gp1,1]^2 * f[gp1]) - (m1 *  m1 * sum(f[gp1]))   ss2 <- sum(d[-gp1,1]^2 * f[-gp1]) - (m2 *  m2 * sum(f[-gp1]))   c(m1 - m2, (ss1 + ss2)/(sum(f) - 2)) } grav1 <- gravity[as.numeric(gravity[,2]) >= 7, ] grav1.boot <- boot(grav1, diff.means, R = 999, stype = \"f\",                    strata = grav1[ ,2]) boot.pval(grav1.boot, type = \"stud\", theta_null = 0)"},{"path":"https://mthulin.github.io/boot.pval/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Bootstrap p-Values","text":"Davison, .C. Hinkley, D.V. (1997) Bootstrap Methods Application. Cambridge University Press. Thulin, M. (2024) Modern Statistics R. Second edition. Chapman & Hall/CRC Press.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/boot.pval.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Bootstrap p-values — boot.pval","title":"Compute Bootstrap p-values — boot.pval","text":"Compute bootstrap p-values confidence interval inversion, described Hall (1992) Thulin (2024).","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/boot.pval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Bootstrap p-values — boot.pval","text":"","code":"boot.pval(   boot_res,   type = \"perc\",   theta_null = 0,   pval_precision = NULL,   alternative = \"two.sided\",   ... )"},{"path":"https://mthulin.github.io/boot.pval/reference/boot.pval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Bootstrap p-values — boot.pval","text":"boot_res object class \"boot\" containing output bootstrap calculation. type vector character strings representing type interval base test . value one \"norm\", \"basic\", \"stud\", \"perc\" (default), \"bca\". theta_null value parameter null hypothesis. pval_precision desired precision p-value. default 1/R,  R number bootstrap samples boot_res. alternative character string specifying alternative hypothesis. Must one \"two.sided\" (default), \"greater\", \"less\". ... Additional arguments passed boot.ci.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/boot.pval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Bootstrap p-values — boot.pval","text":"bootstrap p-value.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/boot.pval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Bootstrap p-values — boot.pval","text":"p-values can computed inverting corresponding confidence intervals, described Section 14.2 Thulin (2024) Section 3.12 Hall (1992). function computes p-values way \"boot\" objects. approach relies fact : p-value two-sided test parameter theta smallest alpha theta contained corresponding 1-alpha confidence interval, test parameter theta significance level alpha, set values theta rejected two-sided test (used null hypothesis) 1-alpha confidence interval theta.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/boot.pval.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute Bootstrap p-values — boot.pval","text":"hall92boot.pval thulin21boot.pval","code":""},{"path":[]},{"path":"https://mthulin.github.io/boot.pval/reference/boot.pval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Bootstrap p-values — boot.pval","text":"","code":"# Hypothesis test for the city data # H0: ratio = 1.4 library(boot) ratio <- function(d, w) sum(d$x * w)/sum(d$u * w) city.boot <- boot(city, ratio, R = 99, stype = \"w\", sim = \"ordinary\") boot.pval(city.boot, theta_null = 1.4) #> [1] 0.3838384  # Studentized test for the two sample difference of means problem # using the final two series of the gravity data. diff.means <- function(d, f) {   n <- nrow(d)   gp1 <- 1:table(as.numeric(d$series))[1]   m1 <- sum(d[gp1,1] * f[gp1])/sum(f[gp1])   m2 <- sum(d[-gp1,1] * f[-gp1])/sum(f[-gp1])   ss1 <- sum(d[gp1,1]^2 * f[gp1]) - (m1 *  m1 * sum(f[gp1]))   ss2 <- sum(d[-gp1,1]^2 * f[-gp1]) - (m2 *  m2 * sum(f[-gp1]))   c(m1 - m2, (ss1 + ss2)/(sum(f) - 2)) } grav1 <- gravity[as.numeric(gravity[,2]) >= 7, ] grav1.boot <- boot(grav1, diff.means, R = 99, stype = \"f\",                    strata = grav1[ ,2]) boot.pval(grav1.boot, type = \"stud\", theta_null = 0) #> [1] 0.01010101"},{"path":"https://mthulin.github.io/boot.pval/reference/boot_median_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap Median Test — boot_median_test","title":"Bootstrap Median Test — boot_median_test","text":"Performs one- two-sample bootstrap median tests computes corresponding bootstrap confidence interval.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/boot_median_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap Median Test — boot_median_test","text":"","code":"boot_median_test(x, ...)  # Default S3 method boot_median_test(   x,   y = NULL,   alternative = c(\"two.sided\", \"less\", \"greater\"),   mu = 0,   paired = FALSE,   var.equal = FALSE,   conf.level = 0.95,   R = 9999,   type = \"stud\",   ... )  # S3 method for class 'formula' boot_median_test(formula, data, subset, na.action, ...)  # S3 method for class 'data.frame' boot_median_test(x, formula, ...)  # S3 method for class 'matrix' boot_median_test(x, formula, ...)"},{"path":"https://mthulin.github.io/boot.pval/reference/boot_median_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap Median Test — boot_median_test","text":"x (non-empty) numeric vector data values. ... Additional arguments passed boot, parallel parallel computations. See ?boot::boot details. y optional (non-empty) numeric vector data values. alternative character string specifying alternative     hypothesis, must one \"two.sided\" (default),     \"greater\" \"less\".  can specify just initial     letter. mu number indicating true value mean (    difference means performing two sample test). paired logical indicating whether want paired     t-test. var.equal logical variable indicating whether treat     two variances equal. TRUE pooled     variance used estimate variance otherwise Welch     (Satterthwaite) approximation degrees freedom used. conf.level confidence level interval. R number bootstrap replicates. default 9999. type vector character strings representing type interval base test . value one \"norm\", \"basic\", \"bca\", perc\", \"stud\" (default). formula formula form lhs ~ rhs lhs     numeric variable giving data values rhs either     1 one-sample paired test factor     two levels giving corresponding groups. lhs     class \"Pair\" rhs 1, paired test     done, see Examples. data optional matrix data frame (similar: see     model.frame) containing variables     formula formula.  default variables taken     environment(formula). subset optional vector specifying subset observations     used. na.action function indicates happen     data contain NAs.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/boot_median_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap Median Test — boot_median_test","text":"list class \"htest\") containing following components: statistic value test statistic. R number bootstrap replicates used. p.value bootstrap p-value test. conf.int bootstrap confidence interval median appropriate specified alternative hypothesis. estimate estimated median difference medians depending whether one-sample test two-sample test. null.value specified hypothesized value median median difference depending whether one-sample test two-sample test. alternative character string describing alternative hypothesis. method character string indicating type median test performed. data.name character string giving name(s) data.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/boot_median_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrap Median Test — boot_median_test","text":"p-values can computed inverting corresponding confidence intervals, described Section 14.2 Thulin (2024) Section 3.12 Hall (1992). function computes p-values Median Test way. approach relies fact : p-value two-sided test parameter theta smallest alpha theta contained corresponding 1-alpha confidence interval, test parameter theta significance level alpha, set values theta rejected two-sided test (used null hypothesis) 1-alpha confidence interval theta. Consequently, p-value consistent confidence interval, sense null hypothesis rejected null parameter values contained confidence interval.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/boot_median_test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bootstrap Median Test — boot_median_test","text":"hall92boot.pval thulin21boot.pval","code":""},{"path":[]},{"path":"https://mthulin.github.io/boot.pval/reference/boot_median_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap Median Test — boot_median_test","text":"","code":"if (FALSE) { # \\dontrun{ # Generate example data: # x is the variable of interest # y is the grouping variable example_data <- data.frame(x = rnorm(40), y = rep(c(1,2), 20))  # Two-sample test: boot_median_test(x ~ y, data = example_data, R = 999)  # Two-sample test using the pipe: example_data |> boot_median_test(x ~ y, R = 999)  # With a directed alternative hypothesis: example_data |> boot_median_test(x ~ y, R = 999, alternative = \"greater\")  # One-sample test: boot_median_test(example_data$x, R = 999)  # One-sample test using the pipe: example_data |> boot_median_test(x ~ 1, R = 999)  # With a directed alternative hypothesis: example_data |> boot_median_test(x ~ 1, R = 999, mu = 0.5, alternative = \"less\")  # Paired test: boot_median_test(example_data$x[example_data$y==1],             example_data$x[example_data$y==2],             paired = TRUE, R = 999)  # Paired test using the pipe (after reshaping to wide format): example_data$id <- rep(1:20, rep(2, 20)) example_data2 <- reshape(example_data, direction = \"wide\",                          idvar = \"id\", timevar = \"y\") example_data2 |> boot_median_test(Pair(x.1, x.2) ~ 1) } # }"},{"path":"https://mthulin.github.io/boot.pval/reference/boot_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarising Regression Models Using the Bootstrap — boot_summary","title":"Summarising Regression Models Using the Bootstrap — boot_summary","text":"Summaries regression models, including \"lm\", \"glm\", \"glm.nb\", \"nls\", \"rlm\", \"polr\", \"merMod\" (\"lmer\", \"glmer\") objects, using bootstrap p-values confidence intervals.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/boot_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarising Regression Models Using the Bootstrap — boot_summary","text":"","code":"boot_summary(   model,   type = \"perc\",   method = NULL,   conf.level = 0.95,   R = 999,   coef = \"raw\",   pval_precision = NULL,   adjust.method = \"none\",   ... )"},{"path":"https://mthulin.github.io/boot.pval/reference/boot_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarising Regression Models Using the Bootstrap — boot_summary","text":"model object fitted using e.g. \"lm\", \"glm\", \"glm.nb\", \"nls\", \"rlm\", \"polr\", lmer\", \"glmer\". type vector character strings representing type interval base test . value one \"norm\", \"basic\", \"bca\", \"perc\" (default). \"bca\" supported \"lmer\" \"glmer\" models. method method used bootstrapping. \"lm\" \"nls\" objects use either \"residual\" (resampling scaled centred residuals, default) \"case\" (case resampling). \"glm\" objects, use \"case\" (default). \"merMod\" objects (mixed models) use either \"parametric\" (default) \"semiparametric\". conf.level confidence level confidence intervals. default 0.95. R number bootstrap replicates. default 999. coef string specifying whether use exponentiated coefficients summary table. Either \"exp\" (exponentiated coefficients, .e. odds ratios case logistic regression model) \"raw\" (coefficients original scale). default \"raw\", recommended linear models. pval_precision desired precision p-value. default 1/R. adjust.method Adjustment p-values multiple comparisons using p.adjust. default \"none\", case p-values adjusted. options \"holm\", \"hochberg\", \"hommel\", \"bonferroni\", \"BH\", \"\", \"fdr\"; see ?p.adjust details methods. ... Additional arguments passed Boot bootMer, parallel parallel computations. See ?car::Boot ?lme4::bootMer details.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/boot_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarising Regression Models Using the Bootstrap — boot_summary","text":"data frame containing coefficient estimates, bootstrap confidence intervals, bootstrap p-values.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/boot_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarising Regression Models Using the Bootstrap — boot_summary","text":"p-values can computed inverting corresponding confidence intervals, described Section 14.2 Thulin (2024) Section 3.12 Hall (1992). function computes p-values coefficients regression models way. approach relies fact : p-value two-sided test parameter theta smallest alpha theta contained corresponding 1-alpha confidence interval, test parameter theta significance level alpha, set values theta rejected two-sided test (used null hypothesis) 1-alpha confidence interval theta. function can used \"lm\", \"glm\", \"glm.nb\", \"nls\", \"rlm\", \"merMod\" (\"lmer\", \"glmer\") objects. addition, work regression model : residuals(object, type=\"pearson\") returns Pearson residuals; fitted(object) returns fitted values; hatvalues(object) returns leverages, perhaps value 1 effectively ignore setting hatvalues. addition, data argument contain missing values among columns actually used fitting model.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/boot_summary.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Summarising Regression Models Using the Bootstrap — boot_summary","text":"hall92boot.pval thulin21boot.pval","code":""},{"path":[]},{"path":"https://mthulin.github.io/boot.pval/reference/boot_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarising Regression Models Using the Bootstrap — boot_summary","text":"","code":"# Bootstrap summary of a linear model for mtcars: model <- lm(mpg ~ hp + vs, data = mtcars) boot_summary(model, R = 99) #>                Estimate Lower.bound Upper.bound p.value #> (Intercept) 26.96300111 22.46858043 33.04643462   <0.01 #> hp          -0.05453412 -0.08515078 -0.03300863   <0.01 #> vs           2.57622314 -1.62537273  6.29452416    0.37 # (Values for R greater than 99 are recommended for most applications.)  # Adjust p-values for multiplicity using Holm's method: boot_summary(model, R = 99, adjust.method = \"holm\") #>                Estimate Lower.bound Upper.bound p.value Adjusted p-value #> (Intercept) 26.96300111 20.64731661 33.01217023   <0.01             0.03 #> hp          -0.05453412 -0.08505702 -0.02204617   <0.01             0.03 #> vs           2.57622314 -1.10406035  7.69178446    0.23             0.23"},{"path":"https://mthulin.github.io/boot.pval/reference/boot_t_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap t-Test — boot_t_test","title":"Bootstrap t-Test — boot_t_test","text":"Performs one- two-sample bootstrap t-tests computes corresponding bootstrap confidence interval.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/boot_t_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap t-Test — boot_t_test","text":"","code":"boot_t_test(x, ...)  # Default S3 method boot_t_test(   x,   y = NULL,   alternative = c(\"two.sided\", \"less\", \"greater\"),   mu = 0,   paired = FALSE,   var.equal = FALSE,   conf.level = 0.95,   R = 9999,   type = \"stud\",   ... )  # S3 method for class 'formula' boot_t_test(formula, data, subset, na.action, ...)  # S3 method for class 'data.frame' boot_t_test(x, formula, ...)  # S3 method for class 'matrix' boot_t_test(x, formula, ...)"},{"path":"https://mthulin.github.io/boot.pval/reference/boot_t_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap t-Test — boot_t_test","text":"x (non-empty) numeric vector data values. ... Additional arguments passed boot, parallel parallel computations. See ?boot::boot details. y optional (non-empty) numeric vector data values. alternative character string specifying alternative     hypothesis, must one \"two.sided\" (default),     \"greater\" \"less\".  can specify just initial     letter. mu number indicating true value mean (    difference means performing two sample test). paired logical indicating whether want paired     t-test. var.equal logical variable indicating whether treat     two variances equal. TRUE pooled     variance used estimate variance otherwise Welch     (Satterthwaite) approximation degrees freedom used. conf.level confidence level interval. R number bootstrap replicates. default 9999. type vector character strings representing type interval base test . value one \"norm\", \"basic\", \"bca\", perc\", \"stud\" (default). formula formula form lhs ~ rhs lhs     numeric variable giving data values rhs either     1 one-sample paired test factor     two levels giving corresponding groups. lhs     class \"Pair\" rhs 1, paired test     done, see Examples. data optional matrix data frame (similar: see     model.frame) containing variables     formula formula.  default variables taken     environment(formula). subset optional vector specifying subset observations     used. na.action function indicates happen     data contain NAs.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/boot_t_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap t-Test — boot_t_test","text":"list class \"htest\") containing following components: statistic value t-statistic. R number bootstrap replicates used. p.value bootstrap p-value test. conf.int bootstrap confidence interval mean appropriate specified alternative hypothesis. estimate estimated mean difference means depending whether one-sample test two-sample test. null.value specified hypothesized value mean mean difference depending whether one-sample test two-sample test. alternative character string describing alternative hypothesis. method character string indicating type t-test performed. data.name character string giving name(s) data.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/boot_t_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrap t-Test — boot_t_test","text":"p-values can computed inverting corresponding confidence intervals, described Section 14.2 Thulin (2024) Section 3.12 Hall (1992). function computes p-values t-test way. approach relies fact : p-value two-sided test parameter theta smallest alpha theta contained corresponding 1-alpha confidence interval, test parameter theta significance level alpha, set values theta rejected two-sided test (used null hypothesis) 1-alpha confidence interval theta. Consequently, p-value consistent confidence interval, sense null hypothesis rejected null parameter values contained confidence interval.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/boot_t_test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bootstrap t-Test — boot_t_test","text":"hall92boot.pval thulin21boot.pval","code":""},{"path":[]},{"path":"https://mthulin.github.io/boot.pval/reference/boot_t_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap t-Test — boot_t_test","text":"","code":"# Generate example data: # x is the variable of interest # y is the grouping variable example_data <- data.frame(x = rnorm(40), y = rep(c(1,2), 20))  # Two-sample (Welch) test: boot_t_test(x ~ y, data = example_data, R = 999) #>  #> \tWelch Two Sample Bootstrap t-test (studentized) #>  #> data:  x by y #> t = 0.99842, R = 999, p-value = 0.3123 #> alternative hypothesis: true difference in means between group 1 and group 2 is not equal to 0 #> 95 percent confidence interval: #>  -0.3611907  1.1025029 #> sample estimates: #> mean in group 1 mean in group 2  #>      0.08955452     -0.26890631  #>   # Two-sample (Welch) test using the pipe: example_data |> boot_t_test(x ~ y, R = 999) #>  #> \tWelch Two Sample Bootstrap t-test (studentized) #>  #> data:  x by y #> t = 0.99842, R = 999, p-value = 0.3824 #> alternative hypothesis: true difference in means between group 1 and group 2 is not equal to 0 #> 95 percent confidence interval: #>  -0.3840846  1.0607978 #> sample estimates: #> mean in group 1 mean in group 2  #>      0.08955452     -0.26890631  #>   # With a directed alternative hypothesis: example_data |> boot_t_test(x ~ y, R = 999, alternative = \"greater\") #>  #> \tWelch Two Sample Bootstrap t-test (studentized) #>  #> data:  x by y #> t = 0.99842, R = 999, p-value = 0.1552 #> alternative hypothesis: true difference in means between group 1 and group 2 is greater than 0 #> 95 percent confidence interval: #>  -0.2215106        Inf #> sample estimates: #> mean in group 1 mean in group 2  #>      0.08955452     -0.26890631  #>   # One-sample test: boot_t_test(example_data$x, R = 999) #>  #> \tOne Sample Bootstrap t-test (studentized) #>  #> data:  example_data$x #> t = -0.49957, R = 999, p-value = 0.6587 #> alternative hypothesis: true mean is not equal to 0 #> 95 percent confidence interval: #>  -0.4128478  0.2713103 #> sample estimates: #>  mean of x  #> -0.0896759  #>   # One-sample test using the pipe: example_data |> boot_t_test(x ~ 1, R = 999) #>  #> \tOne Sample Bootstrap t-test (studentized) #>  #> data:  x #> t = -0.49957, R = 999, p-value = 0.6106 #> alternative hypothesis: true mean is not equal to 0 #> 95 percent confidence interval: #>  -0.4808734  0.2779611 #> sample estimates: #>  mean of x  #> -0.0896759  #>   # With a directed alternative hypothesis: example_data |> boot_t_test(x ~ 1, R = 999, mu = 0.5, alternative = \"less\") #>  #> \tOne Sample Bootstrap t-test (studentized) #>  #> data:  x #> t = -3.285, R = 999, p-value = 0.002002 #> alternative hypothesis: true mean is less than 0.5 #> 95 percent confidence interval: #>      -Inf 0.183044 #> sample estimates: #>  mean of x  #> -0.0896759  #>   # Paired test: boot_t_test(example_data$x[example_data$y==1],             example_data$x[example_data$y==2],             paired = TRUE, R = 999) #>  #> \tPaired Bootstrap t-test (studentized) #>  #> data:  example_data$x[example_data$y == 1] and example_data$x[example_data$y == 2] #> t = 0.98995, R = 999, p-value = 0.3233 #> alternative hypothesis: true difference in means is not equal to 0 #> 95 percent confidence interval: #>  -0.3972185  1.1647955 #> sample estimates: #> mean of the differences  #>               0.3584608  #>   # Paired test using the pipe (after reshaping to wide format): example_data$id <- rep(1:20, rep(2, 20)) example_data2 <- reshape(example_data, direction = \"wide\",                          idvar = \"id\", timevar = \"y\") example_data2 |> boot_t_test(Pair(x.1, x.2) ~ 1) #>  #> \tPaired Bootstrap t-test (studentized) #>  #> data:  Pair(x.1, x.2) #> t = 0.98995, R = 9999, p-value = 0.3102 #> alternative hypothesis: true difference in means is not equal to 0 #> 95 percent confidence interval: #>  -0.3584844  1.1611572 #> sample estimates: #> mean of the differences  #>               0.3584608  #>"},{"path":"https://mthulin.github.io/boot.pval/reference/censboot_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarising Survival Regression Models Using the Bootstrap — censboot_summary","title":"Summarising Survival Regression Models Using the Bootstrap — censboot_summary","text":"Summaries Cox proportional hazards accelerated failure time models, using bootstrap p-values confidence intervals.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/censboot_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarising Survival Regression Models Using the Bootstrap — censboot_summary","text":"","code":"censboot_summary(   model,   type = \"perc\",   sim = \"ordinary\",   strata = NULL,   coef = \"exp\",   conf.level = 0.95,   R = 999,   pval_precision = NULL,   adjust.method = \"none\",   ... )"},{"path":"https://mthulin.github.io/boot.pval/reference/censboot_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarising Survival Regression Models Using the Bootstrap — censboot_summary","text":"model object fitted using \"survival::coxph\", \"survival::survreg\", \"rms::psm\". type vector character strings representing type interval base test . value one \"norm\", \"basic\", \"perc\" (default). sim method used bootstrapping. See ?boot::censboot details. Currently \"ordinary\" (case resampling) supported. strata strata used calls survfit. can vector matrix 2 columns. vector assumed strata survival distribution, censoring distribution assumed observations. matrix first column strata survival distribution second strata censoring distribution. sim = \"ordinary\", one set strata used stratify observations. taken first column strata matrix. coef string specifying whether use exponentiated coefficients summary table. Either \"exp\" (exponentiated coefficients, .e. hazard ratios case Cox PH model) \"raw\" (coefficients original scale). default \"exp\". conf.level confidence level confidence intervals. default 0.95. R number bootstrap replicates. default 999. pval_precision desired precision p-value. default 1/R. adjust.method Adjustment p-values multiple comparisons using p.adjust. default \"none\", case p-values adjusted. options \"holm\", \"hochberg\", \"hommel\", \"bonferroni\", \"BH\", \"\", \"fdr\"; see ?p.adjust details methods. ... Additional arguments passed censboot, parallel parallel computations. See ?boot::censboot details.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/censboot_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarising Survival Regression Models Using the Bootstrap — censboot_summary","text":"data frame containing coefficient estimates, bootstrap confidence intervals, bootstrap p-values.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/censboot_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarising Survival Regression Models Using the Bootstrap — censboot_summary","text":"p-values can computed inverting corresponding confidence intervals, described Section 14.2 Thulin (2024) Section 3.12 Hall (1992). function computes p-values way \"coxph\" \"survreg\" objects. approach relies fact : p-value two-sided test parameter theta smallest alpha theta contained corresponding 1-alpha confidence interval, test parameter theta significance level alpha, set values theta rejected two-sided test (used null hypothesis) 1-alpha confidence interval theta.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/censboot_summary.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Summarising Survival Regression Models Using the Bootstrap — censboot_summary","text":"hall92boot.pval thulin21boot.pval","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/censboot_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarising Survival Regression Models Using the Bootstrap — censboot_summary","text":"","code":"library(survival) #>  #> Attaching package: ‘survival’ #> The following object is masked from ‘package:boot’: #>  #>     aml # Weibull AFT model: # Note that model = TRUE is required for use with censboot_summary: model <- survreg(formula = Surv(time, status) ~ age + sex, data = lung,                  dist = \"weibull\", model = TRUE) censboot_summary(model, R = 99) #> Using exponentiated coefficients. #>                Estimate Lower.bound Upper.bound p.value #> (Intercept) 531.0483429 185.4615956 1309.466858   <0.01 #> age           0.9878178   0.9746921    1.002980    0.17 #> sex           1.4653368   1.1832707    1.913004   <0.01 # (Values for R greater than 99 are recommended for most applications.)  # Cox PH model: model <- coxph(formula = Surv(time, status) ~ age + sex, data = lung,                model = TRUE) # Table with hazard ratios: censboot_summary(model, R = 99) #> Using exponentiated coefficients. #>     Estimate Lower.bound Upper.bound p.value #> age 1.017191   0.9986972   1.0382557    0.08 #> sex 0.598566   0.4022327   0.8631437   <0.01 censboot_summary(model, coef = \"raw\", R = 99) #> Using raw coefficients. #>        Estimate  Lower.bound Upper.bound p.value #> age  0.01704533  0.001207305  0.03921424   <0.01 #> sex -0.51321852 -0.946193565 -0.24131217   <0.01"},{"path":"https://mthulin.github.io/boot.pval/reference/summary_to_flextable.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Bootstrap Summary Tables to flextable Objects — summary_to_flextable","title":"Convert Bootstrap Summary Tables to flextable Objects — summary_to_flextable","text":"Converts tables created using boot_summary censboot_summary nicely formatted flextable tables.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/summary_to_flextable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Bootstrap Summary Tables to flextable Objects — summary_to_flextable","text":"","code":"summary_to_flextable(summary_table, decimals = 3, conf = \"95 % CI\")"},{"path":"https://mthulin.github.io/boot.pval/reference/summary_to_flextable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Bootstrap Summary Tables to flextable Objects — summary_to_flextable","text":"summary_table table created using boot_summary censboot_summary. decimals number decimals print estimates confidence intervals. default 3. conf text top confidence interval column gt table. default \"95 % CI\".","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/summary_to_flextable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Bootstrap Summary Tables to flextable Objects — summary_to_flextable","text":"flextable object.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/summary_to_flextable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Bootstrap Summary Tables to flextable Objects — summary_to_flextable","text":"Estimate 95 % CI p-value (Intercept) 26.963 (22.414, 33.997) <0.01 hp -0.055 (-0.088, -0.032) <0.01 vs 2.576 (-1.672, 5.825) 0.31","code":"# Bootstrap summary of a linear model for mtcars: model <- lm(mpg ~ hp + vs, data = mtcars) boot_summary(model, R = 99) |> summary_to_flextable() .cl-e8b6fea2{table-layout:auto;}.cl-e8b12856{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-e8b3a05e{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-e8b3a068{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-e8b3bd50{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(102, 102, 102, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-e8b3bd5a{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 1pt solid rgba(102, 102, 102, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-e8b3bd64{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-e8b3bd65{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(102, 102, 102, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-e8b3bd6e{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(102, 102, 102, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-e8b3bd6f{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-e8b3bd78{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(102, 102, 102, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-e8b3bd82{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(102, 102, 102, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-e8b3bd83{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} Estimate95 % CIp-value(Intercept)26.963(22.414, 33.997)<0.01hp-0.055(-0.088, -0.032)<0.01vs2.576(-1.672, 5.825)0.31 # Export to Word: if (FALSE) { # \\dontrun{ boot_summary(model, R = 99) |>    summary_to_flextable() |>    flextable::save_as_docx(path = \"my_table.docx\") } # }"},{"path":"https://mthulin.github.io/boot.pval/reference/summary_to_gt.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Bootstrap Summary Tables to gt Objects — summary_to_gt","title":"Convert Bootstrap Summary Tables to gt Objects — summary_to_gt","text":"Converts tables created using boot_summary censboot_summary nicely formatted gt tables.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/summary_to_gt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Bootstrap Summary Tables to gt Objects — summary_to_gt","text":"","code":"summary_to_gt(summary_table, decimals = 3, conf = \"95 % CI\")"},{"path":"https://mthulin.github.io/boot.pval/reference/summary_to_gt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Bootstrap Summary Tables to gt Objects — summary_to_gt","text":"summary_table table created using boot_summary censboot_summary. decimals number decimals print estimates confidence intervals. default 3. conf text top confidence interval column gt table. default \"95 % CI\".","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/summary_to_gt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Bootstrap Summary Tables to gt Objects — summary_to_gt","text":"gt table.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/summary_to_gt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Bootstrap Summary Tables to gt Objects — summary_to_gt","text":"","code":"# Bootstrap summary of a linear model for mtcars: model <- lm(mpg ~ hp + vs, data = mtcars) boot_summary(model, R = 99) |> summary_to_gt()            Estimate       95 % CI       p-value     (Intercept) 26.963 (21.735, 32.982) <0.01hp −0.055 (−0.085, −0.027) <0.01vs 2.576 (−1.749, 5.782) 0.14"},{"path":"https://mthulin.github.io/boot.pval/news/index.html","id":"bootpval-version-07","dir":"Changelog","previous_headings":"","what":"boot.pval version 0.7","title":"boot.pval version 0.7","text":"Added support one-sided tests. Added boot_t_test boot_median_test functions carrying bootstrap tests location. Updated documentation boot_summary censboot_summary mention studentized intervals (aren’t supported upstream packages). Added new vignette.","code":""},{"path":"https://mthulin.github.io/boot.pval/news/index.html","id":"bootpval-version-06","dir":"Changelog","previous_headings":"","what":"boot.pval version 0.6","title":"boot.pval version 0.6","text":"CRAN release: 2025-01-14 Added automatic handling missing values, don’t removed manually data prior using boot_summary(). Added support BCa intervals , improved performance intervals. Improved presentation p-values regression models. Added vignette.","code":""},{"path":"https://mthulin.github.io/boot.pval/news/index.html","id":"bootpval-version-05","dir":"Changelog","previous_headings":"","what":"boot.pval version 0.5","title":"boot.pval version 0.5","text":"CRAN release: 2023-09-28 Added support AFT models fitted using rms::psm. Added functions creating publication-ready summary tables using gt flextable packages. Removed support BCa intervals regression models, longer supported upstream packages.","code":""},{"path":"https://mthulin.github.io/boot.pval/news/index.html","id":"bootpval-version-041","dir":"Changelog","previous_headings":"","what":"boot.pval version 0.4.1","title":"boot.pval version 0.4.1","text":"CRAN release: 2022-12-06 Fixed bug caused boot_summary throw error used GLM’s R version >= 4.2.","code":""},{"path":"https://mthulin.github.io/boot.pval/news/index.html","id":"bootpval-version-04","dir":"Changelog","previous_headings":"","what":"boot.pval version 0.4","title":"boot.pval version 0.4","text":"CRAN release: 2021-11-25 Two bugs censboot_summary() fixed: ) bug caused incorrect p-values exponentiated coefficients, b) bug cause function fail variables Surv object weren’t named time status. options creating table exponentiated coefficients using boot_summary() also added (useful e.g. logistic regression models).","code":""},{"path":"https://mthulin.github.io/boot.pval/news/index.html","id":"bootpval-version-03","dir":"Changelog","previous_headings":"","what":"boot.pval version 0.3","title":"boot.pval version 0.3","text":"CRAN release: 2021-09-04 boot_summary() now also works mixed linear models fitted using lmerTest package. previous releases, models weren’t correctly identified boot_summary().","code":""},{"path":"https://mthulin.github.io/boot.pval/news/index.html","id":"bootpval-version-02","dir":"Changelog","previous_headings":"","what":"boot.pval version 0.2","title":"boot.pval version 0.2","text":"CRAN release: 2021-08-16 Changes made documentation, additional error messages added.","code":""},{"path":"https://mthulin.github.io/boot.pval/news/index.html","id":"bootpval-version-01","dir":"Changelog","previous_headings":"","what":"boot.pval version 0.1","title":"boot.pval version 0.1","text":"first release package.","code":""}]
