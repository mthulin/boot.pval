[{"path":"https://mthulin.github.io/boot.pval/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 boot.pval authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mthulin.github.io/boot.pval/articles/boot_summary.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"An introduction to bootstrap p-values for regression models using the boot.pval package","text":"p-values can computed inverting corresponding confidence intervals, described Section 14.2 Thulin (2024) Section 3.12 Hall (1992). package contains functions computing bootstrap p-values way. approach relies fact : p-value two-sided test parameter theta smallest alpha theta contained corresponding 1-alpha confidence interval, test parameter theta significance level alpha, set values theta aren’t rejected two-sided test (used null hypothesis) 1-alpha confidence interval theta.","code":""},{"path":"https://mthulin.github.io/boot.pval/articles/boot_summary.html","id":"summaries-for-regression-models","dir":"Articles","previous_headings":"","what":"Summaries for regression models","title":"An introduction to bootstrap p-values for regression models using the boot.pval package","text":"Summary tables confidence intervals p-values coefficients regression models can obtained using boot_summary (models) censboot_summary (models censored response variables) functions. Currently, following models supported: Linear models fitted using lm, Generalised linear models fitted using glm glm.nb, Nonlinear models fitted using nls, Robust linear models fitted using MASS::rlm, Ordered logistic probit regression models fitted (without weights) using MASS:polr, Linear mixed models fitted using lme4::lmer lmerTest::lmer, Generalised linear mixed models fitted using lme4::glmer. Cox PH regression models fitted using survival::coxph (using censboot_summary). Accelerated failure time models fitted using survival::survreg rms::psm (using censboot_summary). regression model : residuals(object, type=\"pearson\") returns Pearson residuals; fitted(object) returns fitted values; hatvalues(object) returns leverages, perhaps value 1 effectively ignore setting hatvalues. addition, data argument contain missing values among columns actually used fitting model. number examples available Chapters 8 9 Modern Statistics R. simple examples linear regression model mtcars data: toy example generalised linear mixed model (using small number bootstrap repetitions):","code":"library(boot.pval) # Bootstrap summary of a linear model for mtcars: model <- lm(mpg ~ hp + vs, data = mtcars) boot_summary(model) #>                Estimate Lower.bound Upper.bound p.value #> (Intercept) 26.96300111  21.4837009 33.13272436  <0.001 #> hp          -0.05453412  -0.0847155 -0.02624529  <0.001 #> vs           2.57622314  -1.3354573  6.23773863   0.225  # Use 9999 bootstrap replicates and adjust p-values for # multiplicity using Holm's method: boot_summary(model, R = 9999, adjust.method = \"holm\") #>                Estimate Lower.bound Upper.bound p.value Adjusted p-value #> (Intercept) 26.96300111 21.29253243  32.6863499  <1e-04           0.0003 #> hp          -0.05453412 -0.08217782  -0.0256178   4e-04           0.0008 #> vs           2.57622314 -1.42802199   6.4742569  0.2012           0.2012  # Export results to a gt table: boot_summary(model, R = 9999) |>   summary_to_gt() # Export results to a Word document: library(flextable) boot_summary(model, R = 9999) |>   summary_to_flextable() |>    save_as_docx(path = \"my_table.docx\") library(lme4) model <- glmer(TICKS ~ YEAR + (1|LOCATION),            data = grouseticks, family = poisson) boot_summary(model, R = 99)"},{"path":"https://mthulin.github.io/boot.pval/articles/boot_summary.html","id":"speeding-up-computations","dir":"Articles","previous_headings":"","what":"Speeding up computations","title":"An introduction to bootstrap p-values for regression models using the boot.pval package","text":"complex models, speed can greatly improved using parallelisation. lmer glmer models, set using parallel (available options \"multicore\" \"snow\"). number CPUs use set using ncpus. models, use ncores:","code":"model <- glmer(TICKS ~ YEAR + (1|LOCATION),            data = grouseticks, family = poisson) boot_summary(model, R = 999, parallel = \"multicore\", ncpus = 10) model <- lm(mpg ~ hp + vs, data = mtcars) boot_summary(model, R = 9999, ncores = 10)"},{"path":"https://mthulin.github.io/boot.pval/articles/boot_summary.html","id":"survival-models","dir":"Articles","previous_headings":"","what":"Survival models","title":"An introduction to bootstrap p-values for regression models using the boot.pval package","text":"Survival regression models fitted using argument model = TRUE. summary table can obtained using censboot_summary. default, table contains exponentiated coefficients (.e. hazard ratios, case Cox PH model). speed computations using parallelisation, use parallel ncpus arguments:","code":"library(survival) # Weibull AFT model: model <- survreg(formula = Surv(time, status) ~ age + sex, data = lung,                 dist = \"weibull\", model = TRUE) # Table with exponentiated coefficients: censboot_summary(model) #> Using exponentiated coefficients. #>                Estimate Lower.bound Upper.bound p.value #> (Intercept) 531.0483429 204.9676111 1461.946679  <0.001 #> age           0.9878178   0.9730908    1.001803   0.092 #> sex           1.4653368   1.1570585    1.895106   0.003  # Cox PH model: model <- coxph(formula = Surv(time, status) ~ age + sex, data = lung,                model = TRUE) # Table with hazard ratios: censboot_summary(model) #> Using exponentiated coefficients. #>     Estimate Lower.bound Upper.bound p.value #> age 1.017191   0.9983402   1.0361095   0.076 #> sex 0.598566   0.4226231   0.8210418   0.003 # Table with original coefficients: censboot_summary(model, coef = \"raw\") #> Using raw coefficients. #>        Estimate  Lower.bound Upper.bound p.value #> age  0.01704533 -0.001899761  0.03730923   0.071 #> sex -0.51321852 -0.860520833 -0.19994291   0.006 censboot_summary(model, parallel = \"multicore\", ncpus = 10)"},{"path":"https://mthulin.github.io/boot.pval/articles/boot_summary.html","id":"other-hypothesis-tests","dir":"Articles","previous_headings":"","what":"Other hypothesis tests","title":"An introduction to bootstrap p-values for regression models using the boot.pval package","text":"Bootstrap p-values hypothesis tests based boot objects can obtained using boot.pval function. following examples extensions given documentation boot::boot:","code":"# Hypothesis test for the city data # H0: ratio = 1.4 library(boot) ratio <- function(d, w) sum(d$x * w)/sum(d$u * w) city.boot <- boot(city, ratio, R = 999, stype = \"w\", sim = \"ordinary\") boot.pval(city.boot, theta_null = 1.4) #> [1] 0.4814815  # Studentized test for the two sample difference of means problem # using the final two series of the gravity data. diff.means <- function(d, f) {   n <- nrow(d)   gp1 <- 1:table(as.numeric(d$series))[1]   m1 <- sum(d[gp1,1] * f[gp1])/sum(f[gp1])   m2 <- sum(d[-gp1,1] * f[-gp1])/sum(f[-gp1])   ss1 <- sum(d[gp1,1]^2 * f[gp1]) - (m1 *  m1 * sum(f[gp1]))   ss2 <- sum(d[-gp1,1]^2 * f[-gp1]) - (m2 *  m2 * sum(f[-gp1]))   c(m1 - m2, (ss1 + ss2)/(sum(f) - 2)) } grav1 <- gravity[as.numeric(gravity[,2]) >= 7, ] grav1.boot <- boot(grav1, diff.means, R = 999, stype = \"f\",                    strata = grav1[ ,2]) boot.pval(grav1.boot, type = \"stud\", theta_null = 0) #> [1] 0.03503504"},{"path":"https://mthulin.github.io/boot.pval/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Måns Thulin. Author, maintainer.","code":""},{"path":"https://mthulin.github.io/boot.pval/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Thulin M (2025). boot.pval: Bootstrap p-Values. R package version 0.6, https://mthulin.github.io/boot.pval/, https://github.com/mthulin/boot.pval.","code":"@Manual{,   title = {boot.pval: Bootstrap p-Values},   author = {Måns Thulin},   year = {2025},   note = {R package version 0.6, https://mthulin.github.io/boot.pval/},   url = {https://github.com/mthulin/boot.pval}, }"},{"path":"https://mthulin.github.io/boot.pval/index.html","id":"bootpval-","dir":"","previous_headings":"","what":"Bootstrap p-Values","title":"Bootstrap p-Values","text":"R package provides functions computing bootstrap p-values based boot objects, convenience functions bootstrap confidence intervals p-values various regression models.","code":""},{"path":"https://mthulin.github.io/boot.pval/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bootstrap p-Values","text":"install package CRAN: install development version Github:","code":"install.packages(\"boot.pval\") library(devtools) install_github(\"mthulin/boot.pval\")"},{"path":"https://mthulin.github.io/boot.pval/index.html","id":"background","dir":"","previous_headings":"","what":"Background","title":"Bootstrap p-Values","text":"p-values can computed inverting corresponding confidence intervals, described Section 14.2 Thulin (2024) Section 3.12 Hall (1992). package contains functions computing bootstrap p-values way. approach relies fact : p-value two-sided test parameter theta smallest alpha theta contained corresponding 1-alpha confidence interval, test parameter theta significance level alpha, set values theta aren’t rejected two-sided test (used null hypothesis) 1-alpha confidence interval theta.","code":""},{"path":"https://mthulin.github.io/boot.pval/index.html","id":"summaries-for-regression-models","dir":"","previous_headings":"","what":"Summaries for regression models","title":"Bootstrap p-Values","text":"Summary tables confidence intervals p-values coefficients regression models can obtained using boot_summary (models) censboot_summary (models censored response variables) functions. Currently, following models supported: Linear models fitted using lm, Generalised linear models fitted using glm glm.nb, Nonlinear models fitted using nls, Robust linear models fitted using MASS::rlm, Ordered logistic probit regression models fitted (without weights) using MASS:polr, Linear mixed models fitted using lme4::lmer lmerTest::lmer, Generalised linear mixed models fitted using lme4::glmer. Cox PH regression models fitted using survival::coxph (using censboot_summary). Accelerated failure time models fitted using survival::survreg rms::psm (using censboot_summary). regression model : residuals(object, type=\"pearson\") returns Pearson residuals; fitted(object) returns fitted values; hatvalues(object) returns leverages, perhaps value 1 effectively ignore setting hatvalues. addition, data argument contain missing values among columns actually used fitting model. number examples available Chapters 8 9 Modern Statistics R. simple examples linear regression model mtcars data: toy example generalised linear mixed model (using small number bootstrap repetitions):","code":"# Bootstrap summary of a linear model for mtcars: model <- lm(mpg ~ hp + vs, data = mtcars) boot_summary(model)  # Use 9999 bootstrap replicates and adjust p-values for # multiplicity using Holm's method: boot_summary(model, R = 9999, adjust.method = \"holm\")  # Export results to a gt table: boot_summary(model, R = 9999) |>   summary_to_gt() # Export results to a Word document: library(flextable) boot_summary(model, R = 9999) |>   summary_to_flextable() |>    save_as_docx(path = \"my_table.docx\") library(lme4) model <- glmer(TICKS ~ YEAR + (1|LOCATION),            data = grouseticks, family = poisson) boot_summary(model, R = 99)"},{"path":"https://mthulin.github.io/boot.pval/index.html","id":"speeding-up-computations","dir":"","previous_headings":"","what":"Speeding up computations","title":"Bootstrap p-Values","text":"complex models, speed can greatly improved using parallelisation. lmer glmer models, set using parallel (available options \"multicore\" \"snow\"). number CPUs use set using ncpus. models, use ncores:","code":"model <- glmer(TICKS ~ YEAR + (1|LOCATION),            data = grouseticks, family = poisson) boot_summary(model, R = 999, parallel = \"multicore\", ncpus = 10) model <- lm(mpg ~ hp + vs, data = mtcars) boot_summary(model, R = 9999, ncores = 10)"},{"path":"https://mthulin.github.io/boot.pval/index.html","id":"survival-models","dir":"","previous_headings":"","what":"Survival models","title":"Bootstrap p-Values","text":"Survival regression models fitted using argument model = TRUE. summary table can obtained using censboot_summary. default, table contains exponentiated coefficients (.e. hazard ratios, case Cox PH model). speed computations using parallelisation, use parallel ncpus arguments:","code":"library(survival) # Weibull AFT model: model <- survreg(formula = Surv(time, status) ~ age + sex, data = lung,                 dist = \"weibull\", model = TRUE) # Table with exponentiated coefficients: censboot_summary(model)  # Cox PH model: model <- coxph(formula = Surv(time, status) ~ age + sex, data = lung,                model = TRUE) # Table with hazard ratios: censboot_summary(model) # Table with original coefficients: censboot_summary(model, coef = \"raw\") censboot_summary(model, parallel = \"multicore\", ncpus = 10)"},{"path":"https://mthulin.github.io/boot.pval/index.html","id":"other-hypothesis-tests","dir":"","previous_headings":"","what":"Other hypothesis tests","title":"Bootstrap p-Values","text":"Bootstrap p-values hypothesis tests based boot objects can obtained using boot.pval function. following examples extensions given documentation boot::boot:","code":"# Hypothesis test for the city data # H0: ratio = 1.4 library(boot) ratio <- function(d, w) sum(d$x * w)/sum(d$u * w) city.boot <- boot(city, ratio, R = 999, stype = \"w\", sim = \"ordinary\") boot.pval(city.boot, theta_null = 1.4)  # Studentized test for the two sample difference of means problem # using the final two series of the gravity data. diff.means <- function(d, f) {   n <- nrow(d)   gp1 <- 1:table(as.numeric(d$series))[1]   m1 <- sum(d[gp1,1] * f[gp1])/sum(f[gp1])   m2 <- sum(d[-gp1,1] * f[-gp1])/sum(f[-gp1])   ss1 <- sum(d[gp1,1]^2 * f[gp1]) - (m1 *  m1 * sum(f[gp1]))   ss2 <- sum(d[-gp1,1]^2 * f[-gp1]) - (m2 *  m2 * sum(f[-gp1]))   c(m1 - m2, (ss1 + ss2)/(sum(f) - 2)) } grav1 <- gravity[as.numeric(gravity[,2]) >= 7, ] grav1.boot <- boot(grav1, diff.means, R = 999, stype = \"f\",                    strata = grav1[ ,2]) boot.pval(grav1.boot, type = \"stud\", theta_null = 0)"},{"path":"https://mthulin.github.io/boot.pval/reference/boot.pval.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Bootstrap p-values — boot.pval","title":"Compute Bootstrap p-values — boot.pval","text":"Compute bootstrap p-values confidence interval inversion, described Hall (1992) Thulin (2024).","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/boot.pval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Bootstrap p-values — boot.pval","text":"","code":"boot.pval(boot_res, type = \"perc\", theta_null = 0, pval_precision = NULL, ...)"},{"path":"https://mthulin.github.io/boot.pval/reference/boot.pval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Bootstrap p-values — boot.pval","text":"boot_res object class \"boot\" containing output bootstrap calculation. type vector character strings representing type interval base test . value one \"norm\", \"basic\", \"stud\", \"perc\" (default), \"bca\". theta_null value parameter null hypothesis. pval_precision desired precision p-value. default 1/R,  R number bootstrap samples boot_res. ... Additional arguments passed boot.ci.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/boot.pval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Bootstrap p-values — boot.pval","text":"bootstrap p-value.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/boot.pval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Bootstrap p-values — boot.pval","text":"p-values can computed inverting corresponding confidence intervals, described Section 14.2 Thulin (2024) Section 3.12 Hall (1992). function computes p-values way \"boot\" objects. approach relies fact : p-value two-sided test parameter theta smallest alpha theta contained corresponding 1-alpha confidence interval, test parameter theta significance level alpha, set values theta rejected two-sided test (used null hypothesis) 1-alpha confidence interval theta.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/boot.pval.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute Bootstrap p-values — boot.pval","text":"hall92boot.pval thulin21boot.pval","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/boot.pval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Bootstrap p-values — boot.pval","text":"","code":"# Hypothesis test for the city data # H0: ratio = 1.4 library(boot) ratio <- function(d, w) sum(d$x * w)/sum(d$u * w) city.boot <- boot(city, ratio, R = 99, stype = \"w\", sim = \"ordinary\") boot.pval(city.boot, theta_null = 1.4) #> [1] 0.3838384  # Studentized test for the two sample difference of means problem # using the final two series of the gravity data. diff.means <- function(d, f) {   n <- nrow(d)   gp1 <- 1:table(as.numeric(d$series))[1]   m1 <- sum(d[gp1,1] * f[gp1])/sum(f[gp1])   m2 <- sum(d[-gp1,1] * f[-gp1])/sum(f[-gp1])   ss1 <- sum(d[gp1,1]^2 * f[gp1]) - (m1 *  m1 * sum(f[gp1]))   ss2 <- sum(d[-gp1,1]^2 * f[-gp1]) - (m2 *  m2 * sum(f[-gp1]))   c(m1 - m2, (ss1 + ss2)/(sum(f) - 2)) } grav1 <- gravity[as.numeric(gravity[,2]) >= 7, ] grav1.boot <- boot(grav1, diff.means, R = 99, stype = \"f\",                    strata = grav1[ ,2]) boot.pval(grav1.boot, type = \"stud\", theta_null = 0) #> [1] 0.01010101"},{"path":"https://mthulin.github.io/boot.pval/reference/boot_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarising Regression Models Using the Bootstrap — boot_summary","title":"Summarising Regression Models Using the Bootstrap — boot_summary","text":"Summaries regression models, including \"lm\", \"glm\", \"glm.nb\", \"nls\", \"rlm\", \"polr\", \"merMod\" (\"lmer\", \"glmer\") objects, using bootstrap p-values confidence intervals.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/boot_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarising Regression Models Using the Bootstrap — boot_summary","text":"","code":"boot_summary(   model,   type = \"perc\",   method = NULL,   conf.level = 0.95,   R = 999,   coef = \"raw\",   pval_precision = NULL,   adjust.method = \"none\",   ... )"},{"path":"https://mthulin.github.io/boot.pval/reference/boot_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarising Regression Models Using the Bootstrap — boot_summary","text":"model object fitted using e.g. \"lm\", \"glm\", \"glm.nb\", \"nls\", \"rlm\", \"polr\", lmer\", \"glmer\". type vector character strings representing type interval base test . value one \"norm\", \"basic\", \"bca\", \"perc\" (default). \"bca\" supported \"lmer\" \"glmer\" models. method method used bootstrapping. \"lm\" \"nls\" objects use either \"residual\" (resampling scaled centred residuals, default) \"case\" (case resampling). \"glm\" objects, use \"case\" (default). \"merMod\" objects (mixed models) use either \"parametric\" (default) \"semiparametric\". conf.level confidence level confidence intervals. default 0.95. R number bootstrap replicates. default 999. coef string specifying whether use exponentiated coefficients summary table. Either \"exp\" (exponentiated coefficients, .e. odds ratios case logistic regression model) \"raw\" (coefficients original scale). default \"raw\", recommended linear models. pval_precision desired precision p-value. default 1/R. adjust.method Adjustment p-values multiple comparisons using p.adjust. default \"none\", case p-values adjusted. options \"holm\", \"hochberg\", \"hommel\", \"bonferroni\", \"BH\", \"\", \"fdr\"; see ?p.adjust details methods. ... Additional arguments passed Boot bootMer, parallel parallel computations. See ?car::Boot ?lme4::bootMer details.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/boot_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarising Regression Models Using the Bootstrap — boot_summary","text":"data frame containing coefficient estimates, bootstrap confidence intervals, bootstrap p-values.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/boot_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarising Regression Models Using the Bootstrap — boot_summary","text":"p-values can computed inverting corresponding confidence intervals, described Section 14.2 Thulin (2024) Section 3.12 Hall (1992). function computes p-values coefficients regression models way. approach relies fact : p-value two-sided test parameter theta smallest alpha theta contained corresponding 1-alpha confidence interval, test parameter theta significance level alpha, set values theta rejected two-sided test (used null hypothesis) 1-alpha confidence interval theta. function can used \"lm\", \"glm\", \"glm.nb\", \"nls\", \"rlm\", \"merMod\" (\"lmer\", \"glmer\") objects. addition, work regression model : residuals(object, type=\"pearson\") returns Pearson residuals; fitted(object) returns fitted values; hatvalues(object) returns leverages, perhaps value 1 effectively ignore setting hatvalues. addition, data argument contain missing values among columns actually used fitting model.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/boot_summary.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Summarising Regression Models Using the Bootstrap — boot_summary","text":"hall92boot.pval thulin21boot.pval","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/boot_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarising Regression Models Using the Bootstrap — boot_summary","text":"","code":"# Bootstrap summary of a linear model for mtcars: model <- lm(mpg ~ hp + vs, data = mtcars) boot_summary(model, R = 99) #>                Estimate Lower.bound Upper.bound p.value #> (Intercept) 26.96300111 22.46858043 33.04643462   <0.01 #> hp          -0.05453412 -0.08515078 -0.03300863   <0.01 #> vs           2.57622314 -1.62537273  6.29452416    0.37 # (Values for R greater than 99 are recommended for most applications.)  # Adjust p-values for multiplicity using Holm's method: boot_summary(model, R = 99, adjust.method = \"holm\") #>                Estimate Lower.bound Upper.bound p.value Adjusted p-value #> (Intercept) 26.96300111 20.64731661 33.01217023   <0.01             0.03 #> hp          -0.05453412 -0.08505702 -0.02204617   <0.01             0.03 #> vs           2.57622314 -1.10406035  7.69178446    0.23             0.23"},{"path":"https://mthulin.github.io/boot.pval/reference/censboot_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarising Survival Regression Models Using the Bootstrap — censboot_summary","title":"Summarising Survival Regression Models Using the Bootstrap — censboot_summary","text":"Summaries Cox proportional hazards accelerated failure time models, using bootstrap p-values confidence intervals.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/censboot_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarising Survival Regression Models Using the Bootstrap — censboot_summary","text":"","code":"censboot_summary(   model,   type = \"perc\",   sim = \"ordinary\",   strata = NULL,   coef = \"exp\",   conf.level = 0.95,   R = 999,   pval_precision = NULL,   adjust.method = \"none\",   ... )"},{"path":"https://mthulin.github.io/boot.pval/reference/censboot_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarising Survival Regression Models Using the Bootstrap — censboot_summary","text":"model object fitted using \"survival::coxph\", \"survival::survreg\", \"rms::psm\". type vector character strings representing type interval base test . value one \"norm\", \"basic\", \"perc\" (default). sim method used bootstrapping. See ?boot::censboot details. Currently \"ordinary\" (case resampling) supported. strata strata used calls survfit. can vector matrix 2 columns. vector assumed strata survival distribution, censoring distribution assumed observations. matrix first column strata survival distribution second strata censoring distribution. sim = \"ordinary\", one set strata used stratify observations. taken first column strata matrix. coef string specifying whether use exponentiated coefficients summary table. Either \"exp\" (exponentiated coefficients, .e. hazard ratios case Cox PH model) \"raw\" (coefficients original scale). default \"exp\". conf.level confidence level confidence intervals. default 0.95. R number bootstrap replicates. default 999. pval_precision desired precision p-value. default 1/R. adjust.method Adjustment p-values multiple comparisons using p.adjust. default \"none\", case p-values adjusted. options \"holm\", \"hochberg\", \"hommel\", \"bonferroni\", \"BH\", \"\", \"fdr\"; see ?p.adjust details methods. ... Additional arguments passed censboot, parallel parallel computations. See ?boot::censboot details.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/censboot_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarising Survival Regression Models Using the Bootstrap — censboot_summary","text":"data frame containing coefficient estimates, bootstrap confidence intervals, bootstrap p-values.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/censboot_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarising Survival Regression Models Using the Bootstrap — censboot_summary","text":"p-values can computed inverting corresponding confidence intervals, described Section 14.2 Thulin (2024) Section 3.12 Hall (1992). function computes p-values way \"coxph\" \"survreg\" objects. approach relies fact : p-value two-sided test parameter theta smallest alpha theta contained corresponding 1-alpha confidence interval, test parameter theta significance level alpha, set values theta rejected two-sided test (used null hypothesis) 1-alpha confidence interval theta.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/censboot_summary.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Summarising Survival Regression Models Using the Bootstrap — censboot_summary","text":"hall92boot.pval thulin21boot.pval","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/censboot_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarising Survival Regression Models Using the Bootstrap — censboot_summary","text":"","code":"library(survival) #>  #> Attaching package: ‘survival’ #> The following object is masked from ‘package:boot’: #>  #>     aml # Weibull AFT model: # Note that model = TRUE is required for use with censboot_summary: model <- survreg(formula = Surv(time, status) ~ age + sex, data = lung,                  dist = \"weibull\", model = TRUE) censboot_summary(model, R = 99) #> Using exponentiated coefficients. #>                Estimate Lower.bound Upper.bound p.value #> (Intercept) 531.0483429 205.4092751 1622.523809   <0.01 #> age           0.9878178   0.9726538    1.002786    0.08 #> sex           1.4653368   1.1561772    1.986265   <0.01 # (Values for R greater than 99 are recommended for most applications.)  # Cox PH model: model <- coxph(formula = Surv(time, status) ~ age + sex, data = lung,                model = TRUE) # Table with hazard ratios: censboot_summary(model, R = 99) #> Using exponentiated coefficients. #>     Estimate Lower.bound Upper.bound p.value #> age 1.017191   0.9985085   1.0335299    0.07 #> sex 0.598566   0.4122785   0.8290535   <0.01 censboot_summary(model, coef = \"raw\", R = 99) #> Using raw coefficients. #>        Estimate  Lower.bound Upper.bound p.value #> age  0.01704533  0.001488111  0.03761055    0.04 #> sex -0.51321852 -0.870350799 -0.21276879   <0.01"},{"path":"https://mthulin.github.io/boot.pval/reference/summary_to_flextable.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Bootstrap Summary Tables to flextable Objects — summary_to_flextable","title":"Convert Bootstrap Summary Tables to flextable Objects — summary_to_flextable","text":"Converts tables created using boot_summary censboot_summary nicely formatted flextable tables.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/summary_to_flextable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Bootstrap Summary Tables to flextable Objects — summary_to_flextable","text":"","code":"summary_to_flextable(summary_table, decimals = 3, conf = \"95 % CI\")"},{"path":"https://mthulin.github.io/boot.pval/reference/summary_to_flextable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Bootstrap Summary Tables to flextable Objects — summary_to_flextable","text":"summary_table table created using boot_summary censboot_summary. decimals number decimals print estimates confidence intervals. default 3. conf text top confidence interval column gt table. default \"95 % CI\".","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/summary_to_flextable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Bootstrap Summary Tables to flextable Objects — summary_to_flextable","text":"flextable object.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/summary_to_flextable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Bootstrap Summary Tables to flextable Objects — summary_to_flextable","text":"Estimate 95 % CI p-value (Intercept) 26.963 (20.637, 32.474) <0.01 hp -0.055 (-0.081, -0.023) <0.01 vs 2.576 (-2.334, 7.403) 0.2","code":"# Bootstrap summary of a linear model for mtcars: model <- lm(mpg ~ hp + vs, data = mtcars) boot_summary(model, R = 99) |> summary_to_flextable() .cl-22294b6e{table-layout:auto;}.cl-22210abc{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-2225fe1e{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-2225fe28{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-22261976{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(102, 102, 102, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-22261977{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 1pt solid rgba(102, 102, 102, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-22261980{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-22261981{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(102, 102, 102, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2226198a{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(102, 102, 102, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2226198b{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2226198c{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(102, 102, 102, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-22261994{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(102, 102, 102, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-22261995{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} Estimate95 % CIp-value(Intercept)26.963(20.637, 32.474)<0.01hp-0.055(-0.081, -0.023)<0.01vs2.576(-2.334, 7.403)0.2 # Export to Word: if (FALSE) { # \\dontrun{ boot_summary(model, R = 99) |>    summary_to_flextable() |>    flextable::save_as_docx(path = \"my_table.docx\") } # }"},{"path":"https://mthulin.github.io/boot.pval/reference/summary_to_gt.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Bootstrap Summary Tables to gt Objects — summary_to_gt","title":"Convert Bootstrap Summary Tables to gt Objects — summary_to_gt","text":"Converts tables created using boot_summary censboot_summary nicely formatted gt tables.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/summary_to_gt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Bootstrap Summary Tables to gt Objects — summary_to_gt","text":"","code":"summary_to_gt(summary_table, decimals = 3, conf = \"95 % CI\")"},{"path":"https://mthulin.github.io/boot.pval/reference/summary_to_gt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Bootstrap Summary Tables to gt Objects — summary_to_gt","text":"summary_table table created using boot_summary censboot_summary. decimals number decimals print estimates confidence intervals. default 3. conf text top confidence interval column gt table. default \"95 % CI\".","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/summary_to_gt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Bootstrap Summary Tables to gt Objects — summary_to_gt","text":"gt table.","code":""},{"path":"https://mthulin.github.io/boot.pval/reference/summary_to_gt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Bootstrap Summary Tables to gt Objects — summary_to_gt","text":"","code":"# Bootstrap summary of a linear model for mtcars: model <- lm(mpg ~ hp + vs, data = mtcars) boot_summary(model, R = 99) |> summary_to_gt()            Estimate       95 % CI       p-value     (Intercept) 26.963 (20.557, 33.103) <0.01hp −0.055 (−0.085, −0.022) <0.01vs 2.576 (−1.550, 6.762) 0.19"},{"path":"https://mthulin.github.io/boot.pval/news/index.html","id":"bootpval-version-06","dir":"Changelog","previous_headings":"","what":"boot.pval version 0.6","title":"boot.pval version 0.6","text":"CRAN release: 2025-01-14 Added automatic handling missing values, don’t removed manually data prior using boot_summary(). Added support BCa intervals , improved performance intervals. Improved presentation p-values regression models. Added vignette.","code":""},{"path":"https://mthulin.github.io/boot.pval/news/index.html","id":"bootpval-version-05","dir":"Changelog","previous_headings":"","what":"boot.pval version 0.5","title":"boot.pval version 0.5","text":"CRAN release: 2023-09-28 Added support AFT models fitted using rms::psm. Added functions creating publication-ready summary tables using gt flextable packages. Removed support BCa intervals regression models, longer supported upstream packages.","code":""},{"path":"https://mthulin.github.io/boot.pval/news/index.html","id":"bootpval-version-041","dir":"Changelog","previous_headings":"","what":"boot.pval version 0.4.1","title":"boot.pval version 0.4.1","text":"CRAN release: 2022-12-06 Fixed bug caused boot_summary throw error used GLM’s R version >= 4.2.","code":""},{"path":"https://mthulin.github.io/boot.pval/news/index.html","id":"bootpval-version-04","dir":"Changelog","previous_headings":"","what":"boot.pval version 0.4","title":"boot.pval version 0.4","text":"CRAN release: 2021-11-25 Two bugs censboot_summary() fixed: ) bug caused incorrect p-values exponentiated coefficients, b) bug cause function fail variables Surv object weren’t named time status. options creating table exponentiated coefficients using boot_summary() also added (useful e.g. logistic regression models).","code":""},{"path":"https://mthulin.github.io/boot.pval/news/index.html","id":"bootpval-version-03","dir":"Changelog","previous_headings":"","what":"boot.pval version 0.3","title":"boot.pval version 0.3","text":"CRAN release: 2021-09-04 boot_summary() now also works mixed linear models fitted using lmerTest package. previous releases, models weren’t correctly identified boot_summary().","code":""},{"path":"https://mthulin.github.io/boot.pval/news/index.html","id":"bootpval-version-02","dir":"Changelog","previous_headings":"","what":"boot.pval version 0.2","title":"boot.pval version 0.2","text":"CRAN release: 2021-08-16 Changes made documentation, additional error messages added.","code":""},{"path":"https://mthulin.github.io/boot.pval/news/index.html","id":"bootpval-version-01","dir":"Changelog","previous_headings":"","what":"boot.pval version 0.1","title":"boot.pval version 0.1","text":"first release package.","code":""}]
